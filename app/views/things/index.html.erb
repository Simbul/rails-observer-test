<h1>Testing observers</h1>
<% if flash[:notice] %>
  <div id="notice"><%= flash[:notice] %></div>
<% end %>

<%= link_to 'Click me to test!', things_test_path, :id => "testbutton" %>
<discreet>(but read the description first ;) )</discreet>

<h2>Summary</h2>
<p>This is a proof of concept for a bug in observer reloading.</p>
<p>The bug comes up when editing the source code for an application containing an observer that is observing a class inside a gem.</p>
<p>After a code change (without a server restart), on the subsequent request, a new observer is instanced but the old one is not removed, resulting in a growing number of observer clones.</p>

<h2>Test setup</h2>
<p>This is a test for an observer observing a class inside a gem. The observer is called <code>EmitterObserver</code>, while the observed class is called <code>Emitter::Emitter</code> in the <code>emitter</code> gem.</p>
<p>Clicking the link above will call the <code>emit</code> method for the <code>Emitter</code> class, which is defined in the <code>emitter</code> gem (see the <code>vendor</code> folder).</p>
<p>The <code>emit</code> method will call <a href="http://api.rubyonrails.org/classes/ActiveModel/Observing/ClassMethods.html#method-i-notify_observers"><code>notify_observers</code></a>.</p>
<p>The notification will be picked up by the <code>after_emit</code> callback in <code>EmitterObserver</code>, which will then add a line to the Rails log.</p>

<h2>Desired behaviour</h2>
<p>No more than 1 single <code>EmitterObserver</code> should be active at any given time. That is, the <code>after_emit</code> callback should never be called more than once for a given call to <code>notify_observers</code>.</p>

<h2>Issues</h2>
<p>In development, the <code>config.cache_classes</code> configuration parameter is usually false, meaning classes will be reloaded without the need to restart the server.</p>
<p>In this situation, editing the application code will result in <em>multiple instances of the observer being active at the same time</em>. To test, follow these steps:</p>
<ol>
  <li>Click the link, check the Rails log: it will contain a line showing <code>EmitterObserver ONE called</code></li>
  <li>Edit the code for <code>EmitterObserver</code>, changing the logger message to <code>EmitterObserver TWO called</code></li>
  <li>Do not restart the server (that's how it works in a development environment)</li>
  <li>Click the link again, check the Rails log: it will now show two lines. The first line will show <code>EmitterObserver ONE called</code> (a line generated by the previous observer instance), while the second will show <code>EmitterObserver TWO called</code> (a line generated by the new observer instance, with the edited code)</li>
</ol>
<p>The fact that an old instance of the observer is still lying around is definitely an issue.</p>
<p>It's interesting to notice that the issue is not present when the emitter module is not contained in a gem (e.g. when it is defined as a lib).</p>
<p>It is also worth noting that this issue comes up regardless of the file where the code is changed (e.g. it's not limited to changing the observer code).</p>
